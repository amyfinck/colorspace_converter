	.section	__TEXT,__text,regular,pure_instructions
	.build_version macos, 13, 0	sdk_version 13, 3
	.globl	_exit_on_error                  ; -- Begin function exit_on_error
	.p2align	2
_exit_on_error:                         ; @exit_on_error
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #48
	.cfi_def_cfa_offset 48
	stp	x29, x30, [sp, #32]             ; 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	w0, [x29, #-4]
	str	x1, [sp, #16]
	ldur	w8, [x29, #-4]
	subs	w8, w8, #0
	cset	w8, eq
	tbnz	w8, #0, LBB0_2
	b	LBB0_1
LBB0_1:
	ldr	x8, [sp, #16]
	mov	x9, sp
	str	x8, [x9]
	adrp	x0, l_.str@PAGE
	add	x0, x0, l_.str@PAGEOFF
	bl	_printf
	mov	w0, #1
	bl	_exit
LBB0_2:
	ldp	x29, x30, [sp, #32]             ; 16-byte Folded Reload
	add	sp, sp, #48
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	_compute_ycc_y                  ; -- Begin function compute_ycc_y
	.p2align	2
_compute_ycc_y:                         ; @compute_ycc_y
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	strb	w0, [sp, #15]
	strb	w1, [sp, #14]
	strb	w2, [sp, #13]
	ldrb	w9, [sp, #15]
	mov	w8, #66
	mul	w8, w8, w9
	add	w8, w8, #1, lsl #12             ; =4096
	ldrb	w10, [sp, #14]
	mov	w9, #129
	mul	w9, w9, w10
	add	w8, w8, w9
	ldrb	w10, [sp, #13]
	mov	w9, #25
	mul	w9, w9, w10
	add	w8, w8, w9
	str	w8, [sp, #8]
	ldr	w8, [sp, #8]
	add	w8, w8, #128
	asr	w8, w8, #8
	and	w0, w8, #0xff
	add	sp, sp, #16
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	_compute_ycc_cb                 ; -- Begin function compute_ycc_cb
	.p2align	2
_compute_ycc_cb:                        ; @compute_ycc_cb
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	strb	w0, [sp, #31]
	strb	w1, [sp, #30]
	strb	w2, [sp, #29]
	ldrb	w9, [sp, #31]
	mov	w8, #38
	mul	w9, w8, w9
	mov	w8, #32768
	subs	w8, w8, w9
	ldrb	w10, [sp, #30]
	mov	w9, #74
	mul	w9, w9, w10
	subs	w8, w8, w9
	ldrb	w10, [sp, #29]
	mov	w9, #112
	mul	w9, w9, w10
	add	w8, w8, w9
	str	w8, [sp, #24]
	ldr	w8, [sp, #24]
	add	w8, w8, #128
	asr	w8, w8, #8
	str	w8, [sp, #20]
	ldr	w8, [sp, #20]
	subs	w8, w8, #0
	cset	w8, ge
	tbnz	w8, #0, LBB2_2
	b	LBB2_1
LBB2_1:
	mov	w8, #0
	str	w8, [sp, #16]                   ; 4-byte Folded Spill
	b	LBB2_6
LBB2_2:
	ldr	w8, [sp, #20]
	subs	w8, w8, #255
	cset	w8, le
	tbnz	w8, #0, LBB2_4
	b	LBB2_3
LBB2_3:
	mov	w8, #255
	str	w8, [sp, #12]                   ; 4-byte Folded Spill
	b	LBB2_5
LBB2_4:
	ldr	w8, [sp, #20]
	str	w8, [sp, #12]                   ; 4-byte Folded Spill
	b	LBB2_5
LBB2_5:
	ldr	w8, [sp, #12]                   ; 4-byte Folded Reload
	str	w8, [sp, #16]                   ; 4-byte Folded Spill
	b	LBB2_6
LBB2_6:
	ldr	w8, [sp, #16]                   ; 4-byte Folded Reload
	and	w0, w8, #0xff
	add	sp, sp, #32
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	_compute_ycc_cr                 ; -- Begin function compute_ycc_cr
	.p2align	2
_compute_ycc_cr:                        ; @compute_ycc_cr
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	strb	w0, [sp, #15]
	strb	w1, [sp, #14]
	strb	w2, [sp, #13]
	ldrb	w9, [sp, #15]
	mov	w8, #112
	mul	w8, w8, w9
	add	w8, w8, #8, lsl #12             ; =32768
	ldrb	w10, [sp, #14]
	mov	w9, #94
	mul	w9, w9, w10
	subs	w8, w8, w9
	ldrb	w10, [sp, #13]
	mov	w9, #18
	mul	w9, w9, w10
	subs	w8, w8, w9
	str	w8, [sp, #8]
	ldr	w8, [sp, #8]
	add	w8, w8, #128
	asr	w8, w8, #8
	and	w0, w8, #0xff
	add	sp, sp, #16
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	_compute_rgb_r                  ; -- Begin function compute_rgb_r
	.p2align	2
_compute_rgb_r:                         ; @compute_rgb_r
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	strh	w0, [sp, #30]
	strh	w1, [sp, #28]
	strh	w2, [sp, #26]
	ldrsh	w8, [sp, #30]
	subs	w9, w8, #16
	mov	w8, #74
	mul	w8, w8, w9
	ldrsh	w9, [sp, #26]
	subs	w10, w9, #128
	mov	w9, #102
	mul	w9, w9, w10
	add	w8, w8, w9
	str	w8, [sp, #20]
	ldr	w8, [sp, #20]
	add	w8, w8, #32
	asr	w8, w8, #6
	str	w8, [sp, #20]
	ldr	w8, [sp, #20]
	subs	w8, w8, #0
	cset	w8, ge
	tbnz	w8, #0, LBB4_2
	b	LBB4_1
LBB4_1:
	mov	w8, #0
	str	w8, [sp, #16]                   ; 4-byte Folded Spill
	b	LBB4_6
LBB4_2:
	ldr	w8, [sp, #20]
	subs	w8, w8, #255
	cset	w8, le
	tbnz	w8, #0, LBB4_4
	b	LBB4_3
LBB4_3:
	mov	w8, #255
	str	w8, [sp, #12]                   ; 4-byte Folded Spill
	b	LBB4_5
LBB4_4:
	ldr	w8, [sp, #20]
	str	w8, [sp, #12]                   ; 4-byte Folded Spill
	b	LBB4_5
LBB4_5:
	ldr	w8, [sp, #12]                   ; 4-byte Folded Reload
	str	w8, [sp, #16]                   ; 4-byte Folded Spill
	b	LBB4_6
LBB4_6:
	ldr	w8, [sp, #16]                   ; 4-byte Folded Reload
	and	w0, w8, #0xff
	add	sp, sp, #32
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	_compute_rgb_g                  ; -- Begin function compute_rgb_g
	.p2align	2
_compute_rgb_g:                         ; @compute_rgb_g
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	strh	w0, [sp, #30]
	strh	w1, [sp, #28]
	strh	w2, [sp, #26]
	ldrsh	w8, [sp, #30]
	subs	w9, w8, #16
	mov	w8, #74
	mul	w8, w8, w9
	ldrsh	w9, [sp, #26]
	subs	w10, w9, #128
	mov	w9, #52
	mul	w9, w9, w10
	subs	w8, w8, w9
	ldrsh	w9, [sp, #28]
	subs	w10, w9, #128
	mov	w9, #25
	mul	w9, w9, w10
	subs	w8, w8, w9
	str	w8, [sp, #20]
	ldr	w8, [sp, #20]
	add	w8, w8, #32
	asr	w8, w8, #6
	str	w8, [sp, #20]
	ldr	w8, [sp, #20]
	subs	w8, w8, #0
	cset	w8, ge
	tbnz	w8, #0, LBB5_2
	b	LBB5_1
LBB5_1:
	mov	w8, #0
	str	w8, [sp, #16]                   ; 4-byte Folded Spill
	b	LBB5_6
LBB5_2:
	ldr	w8, [sp, #20]
	subs	w8, w8, #255
	cset	w8, le
	tbnz	w8, #0, LBB5_4
	b	LBB5_3
LBB5_3:
	mov	w8, #255
	str	w8, [sp, #12]                   ; 4-byte Folded Spill
	b	LBB5_5
LBB5_4:
	ldr	w8, [sp, #20]
	str	w8, [sp, #12]                   ; 4-byte Folded Spill
	b	LBB5_5
LBB5_5:
	ldr	w8, [sp, #12]                   ; 4-byte Folded Reload
	str	w8, [sp, #16]                   ; 4-byte Folded Spill
	b	LBB5_6
LBB5_6:
	ldr	w8, [sp, #16]                   ; 4-byte Folded Reload
	and	w0, w8, #0xff
	add	sp, sp, #32
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	_compute_rgb_b                  ; -- Begin function compute_rgb_b
	.p2align	2
_compute_rgb_b:                         ; @compute_rgb_b
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	strh	w0, [sp, #30]
	strh	w1, [sp, #28]
	strh	w2, [sp, #26]
	ldrsh	w8, [sp, #30]
	subs	w9, w8, #16
	mov	w8, #74
	mul	w8, w8, w9
	ldrsh	w9, [sp, #28]
	subs	w10, w9, #128
	mov	w9, #129
	mul	w9, w9, w10
	add	w8, w8, w9
	str	w8, [sp, #20]
	ldr	w8, [sp, #20]
	add	w8, w8, #32
	asr	w8, w8, #6
	str	w8, [sp, #20]
	ldr	w8, [sp, #20]
	subs	w8, w8, #0
	cset	w8, ge
	tbnz	w8, #0, LBB6_2
	b	LBB6_1
LBB6_1:
	mov	w8, #0
	str	w8, [sp, #16]                   ; 4-byte Folded Spill
	b	LBB6_6
LBB6_2:
	ldr	w8, [sp, #20]
	subs	w8, w8, #255
	cset	w8, le
	tbnz	w8, #0, LBB6_4
	b	LBB6_3
LBB6_3:
	mov	w8, #255
	str	w8, [sp, #12]                   ; 4-byte Folded Spill
	b	LBB6_5
LBB6_4:
	ldr	w8, [sp, #20]
	str	w8, [sp, #12]                   ; 4-byte Folded Spill
	b	LBB6_5
LBB6_5:
	ldr	w8, [sp, #12]                   ; 4-byte Folded Reload
	str	w8, [sp, #16]                   ; 4-byte Folded Spill
	b	LBB6_6
LBB6_6:
	ldr	w8, [sp, #16]                   ; 4-byte Folded Reload
	and	w0, w8, #0xff
	add	sp, sp, #32
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	_get_row_byte_count             ; -- Begin function get_row_byte_count
	.p2align	2
_get_row_byte_count:                    ; @get_row_byte_count
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	w0, [sp, #12]
	ldr	w8, [sp, #12]
	mov	w9, #3
	mul	w8, w8, w9
	str	w8, [sp, #8]
	ldr	w8, [sp, #8]
	mov	w10, #4
	udiv	w9, w8, w10
	mul	w9, w9, w10
	subs	w8, w8, w9
	subs	w8, w8, #0
	cset	w8, eq
	tbnz	w8, #0, LBB7_2
	b	LBB7_1
LBB7_1:
	ldr	w9, [sp, #8]
	mov	w8, #4
	udiv	w10, w9, w8
	mul	w10, w10, w8
	subs	w9, w9, w10
	subs	w8, w8, w9
	str	w8, [sp, #4]
	ldr	w9, [sp, #4]
	ldr	w8, [sp, #8]
	add	w8, w8, w9
	str	w8, [sp, #8]
	b	LBB7_2
LBB7_2:
	ldr	w0, [sp, #8]
	add	sp, sp, #16
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	_resize_file                    ; -- Begin function resize_file
	.p2align	2
_resize_file:                           ; @resize_file
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	stp	x29, x30, [sp, #16]             ; 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	str	x0, [sp, #8]
	str	w1, [sp, #4]
	str	w2, [sp]
	ldr	x0, [sp, #8]
	mov	x1, #18
	mov	w2, #0
	bl	_fseek
	subs	w8, w0, #0
	cset	w8, eq
	tbnz	w8, #0, LBB8_2
	b	LBB8_1
LBB8_1:
	adrp	x0, l_.str.1@PAGE
	add	x0, x0, l_.str.1@PAGEOFF
	bl	_printf
	mov	w0, #1
	bl	_exit
LBB8_2:
	ldr	x3, [sp, #8]
	add	x0, sp, #4
	mov	x1, #4
	mov	x2, #1
	bl	_fwrite
	ldr	x0, [sp, #8]
	mov	x1, #22
	mov	w2, #0
	bl	_fseek
	subs	w8, w0, #0
	cset	w8, eq
	tbnz	w8, #0, LBB8_4
	b	LBB8_3
LBB8_3:
	adrp	x0, l_.str.2@PAGE
	add	x0, x0, l_.str.2@PAGEOFF
	bl	_printf
	mov	w0, #1
	bl	_exit
LBB8_4:
	ldr	x3, [sp, #8]
	mov	x0, sp
	mov	x1, #4
	mov	x2, #1
	bl	_fwrite
	ldp	x29, x30, [sp, #16]             ; 16-byte Folded Reload
	add	sp, sp, #32
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	_check_height_width             ; -- Begin function check_height_width
	.p2align	2
_check_height_width:                    ; @check_height_width
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	stp	x29, x30, [sp, #16]             ; 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	w0, [x29, #-4]
	str	w1, [sp, #8]
	ldur	w8, [x29, #-4]
	mov	w10, #2
	udiv	w9, w8, w10
	mul	w9, w9, w10
	subs	w8, w8, w9
	subs	w8, w8, #0
	cset	w8, ne
	mov	w9, #1
	str	w9, [sp]                        ; 4-byte Folded Spill
	tbnz	w8, #0, LBB9_2
	b	LBB9_1
LBB9_1:
	ldr	w8, [sp, #8]
	mov	w10, #2
	udiv	w9, w8, w10
	mul	w9, w9, w10
	subs	w8, w8, w9
	subs	w8, w8, #0
	cset	w8, ne
	str	w8, [sp]                        ; 4-byte Folded Spill
	b	LBB9_2
LBB9_2:
	ldr	w8, [sp]                        ; 4-byte Folded Reload
	and	w8, w8, #0x1
	str	w8, [sp, #4]
	ldr	w0, [sp, #4]
	adrp	x1, l_.str.3@PAGE
	add	x1, x1, l_.str.3@PAGEOFF
	bl	_exit_on_error
	ldp	x29, x30, [sp, #16]             ; 16-byte Folded Reload
	add	sp, sp, #32
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	_rgb_to_ycc                     ; -- Begin function rgb_to_ycc
	.p2align	2
_rgb_to_ycc:                            ; @rgb_to_ycc
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #80
	.cfi_def_cfa_offset 80
	stp	x29, x30, [sp, #64]             ; 16-byte Folded Spill
	add	x29, sp, #64
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	x1, [x29, #-16]
	stur	x2, [x29, #-24]
	ldur	x8, [x29, #-16]
	str	wzr, [x8, #16]
	ldur	x8, [x29, #-16]
	ldr	w0, [x8, #4]
	bl	_get_row_byte_count
	stur	w0, [x29, #-28]
	str	wzr, [sp, #28]
	str	wzr, [sp, #20]
	b	LBB10_1
LBB10_1:                                ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB10_3 Depth 2
	ldr	w8, [sp, #20]
	ldur	x9, [x29, #-16]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, hs
	tbnz	w8, #0, LBB10_10
	b	LBB10_2
LBB10_2:                                ;   in Loop: Header=BB10_1 Depth=1
	str	wzr, [sp, #16]
	b	LBB10_3
LBB10_3:                                ;   Parent Loop BB10_1 Depth=1
                                        ; =>  This Inner Loop Header: Depth=2
	ldr	w8, [sp, #16]
	ldur	x9, [x29, #-16]
	ldr	w9, [x9, #4]
	subs	w8, w8, w9
	cset	w8, hs
	tbnz	w8, #0, LBB10_8
	b	LBB10_4
LBB10_4:                                ;   in Loop: Header=BB10_3 Depth=2
	ldr	w8, [sp, #20]
	ldur	w9, [x29, #-28]
	mul	w8, w8, w9
	ldr	w9, [sp, #16]
	mov	w10, #3
	mul	w9, w9, w10
	add	w8, w8, w9
	str	w8, [sp, #32]
	ldur	x0, [x29, #-8]
	ldur	x8, [x29, #-16]
	ldr	w8, [x8, #8]
                                        ; kill: def $x8 killed $w8
	ldr	w9, [sp, #32]
                                        ; kill: def $x9 killed $w9
	add	x1, x8, x9
	mov	w2, #0
	bl	_fseek
	subs	w8, w0, #0
	cset	w8, eq
	tbnz	w8, #0, LBB10_6
	b	LBB10_5
LBB10_5:
	adrp	x0, l_.str.4@PAGE
	add	x0, x0, l_.str.4@PAGEOFF
	bl	_printf
	ldur	x0, [x29, #-8]
	bl	_fclose
	mov	w0, #1
	bl	_exit
LBB10_6:                                ;   in Loop: Header=BB10_3 Depth=2
	ldur	x3, [x29, #-8]
	add	x0, sp, #25
	mov	x2, #1
	str	x2, [sp]                        ; 8-byte Folded Spill
	mov	x1, x2
	bl	_fread
	ldr	x2, [sp]                        ; 8-byte Folded Reload
	ldur	x3, [x29, #-8]
	add	x0, sp, #26
	mov	x1, x2
	bl	_fread
	ldr	x2, [sp]                        ; 8-byte Folded Reload
	ldur	x3, [x29, #-8]
	add	x0, sp, #27
	mov	x1, x2
	bl	_fread
	ldrb	w0, [sp, #27]
	ldrb	w1, [sp, #26]
	ldrb	w2, [sp, #25]
	bl	_compute_ycc_y
	ldur	x8, [x29, #-24]
	ldr	w9, [sp, #28]
                                        ; kill: def $x9 killed $w9
	mov	x10, #3
	str	x10, [sp, #8]                   ; 8-byte Folded Spill
	mul	x9, x9, x10
	strb	w0, [x8, x9]
	ldrb	w0, [sp, #27]
	ldrb	w1, [sp, #26]
	ldrb	w2, [sp, #25]
	bl	_compute_ycc_cb
	ldr	x10, [sp, #8]                   ; 8-byte Folded Reload
	ldur	x8, [x29, #-24]
	ldr	w9, [sp, #28]
                                        ; kill: def $x9 killed $w9
	mul	x9, x9, x10
	add	x8, x8, x9
	strb	w0, [x8, #1]
	ldrb	w0, [sp, #27]
	ldrb	w1, [sp, #26]
	ldrb	w2, [sp, #25]
	bl	_compute_ycc_cr
	ldr	x10, [sp, #8]                   ; 8-byte Folded Reload
	ldur	x8, [x29, #-24]
	ldr	w9, [sp, #28]
                                        ; kill: def $x9 killed $w9
	mul	x9, x9, x10
	add	x8, x8, x9
	strb	w0, [x8, #2]
	ldr	w8, [sp, #28]
	add	w8, w8, #1
	str	w8, [sp, #28]
	ldur	x9, [x29, #-16]
	ldr	w8, [x9, #16]
	add	w8, w8, #1
	str	w8, [x9, #16]
	b	LBB10_7
LBB10_7:                                ;   in Loop: Header=BB10_3 Depth=2
	ldr	w8, [sp, #16]
	add	w8, w8, #1
	str	w8, [sp, #16]
	b	LBB10_3
LBB10_8:                                ;   in Loop: Header=BB10_1 Depth=1
	b	LBB10_9
LBB10_9:                                ;   in Loop: Header=BB10_1 Depth=1
	ldr	w8, [sp, #20]
	add	w8, w8, #1
	str	w8, [sp, #20]
	b	LBB10_1
LBB10_10:
	ldp	x29, x30, [sp, #64]             ; 16-byte Folded Reload
	add	sp, sp, #80
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	_ycc_to_rgb                     ; -- Begin function ycc_to_rgb
	.p2align	2
_ycc_to_rgb:                            ; @ycc_to_rgb
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #80
	.cfi_def_cfa_offset 80
	stp	x29, x30, [sp, #64]             ; 16-byte Folded Spill
	add	x29, sp, #64
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	x1, [x29, #-16]
	stur	x2, [x29, #-24]
	ldur	x8, [x29, #-8]
	ldr	w8, [x8, #4]
	mov	w9, #3
	mul	w8, w8, w9
	str	w8, [sp, #32]
	ldr	w8, [sp, #32]
	mov	w10, #4
	udiv	w9, w8, w10
	mul	w9, w9, w10
	subs	w8, w8, w9
	subs	w8, w8, #0
	cset	w8, eq
	tbnz	w8, #0, LBB11_2
	b	LBB11_1
LBB11_1:
	ldr	w9, [sp, #32]
	mov	w8, #4
	udiv	w10, w9, w8
	mul	w10, w10, w8
	subs	w9, w9, w10
	subs	w8, w8, w9
	str	w8, [sp, #28]
	ldr	w9, [sp, #28]
	ldr	w8, [sp, #32]
	add	w8, w8, w9
	str	w8, [sp, #32]
	ldr	w8, [sp, #28]
	ldur	x9, [x29, #-8]
	str	w8, [x9, #12]
	b	LBB11_2
LBB11_2:
	str	wzr, [sp, #24]
	str	wzr, [sp, #20]
	b	LBB11_3
LBB11_3:                                ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB11_5 Depth 2
	ldr	w8, [sp, #20]
	ldur	x9, [x29, #-8]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, hs
	tbnz	w8, #0, LBB11_12
	b	LBB11_4
LBB11_4:                                ;   in Loop: Header=BB11_3 Depth=1
	str	wzr, [sp, #16]
	b	LBB11_5
LBB11_5:                                ;   Parent Loop BB11_3 Depth=1
                                        ; =>  This Inner Loop Header: Depth=2
	ldr	w8, [sp, #16]
	ldur	x9, [x29, #-8]
	ldr	w9, [x9, #4]
	subs	w8, w8, w9
	cset	w8, hs
	tbnz	w8, #0, LBB11_10
	b	LBB11_6
LBB11_6:                                ;   in Loop: Header=BB11_5 Depth=2
	ldr	w8, [sp, #20]
	ldr	w9, [sp, #32]
	mul	w8, w8, w9
	ldr	w9, [sp, #16]
	mov	w10, #3
	mul	w9, w9, w10
	add	w8, w8, w9
	str	w8, [sp, #12]
	ldur	x8, [x29, #-16]
	ldr	w9, [sp, #24]
                                        ; kill: def $x9 killed $w9
	mov	x10, #3
	mul	x9, x9, x10
	add	x8, x8, x9
	ldrb	w8, [x8]
	strb	w8, [sp, #11]
	ldur	x8, [x29, #-16]
	ldr	w9, [sp, #24]
                                        ; kill: def $x9 killed $w9
	mul	x9, x9, x10
	add	x8, x8, x9
	ldrb	w8, [x8, #1]
	strb	w8, [sp, #10]
	ldur	x8, [x29, #-16]
	ldr	w9, [sp, #24]
                                        ; kill: def $x9 killed $w9
	mul	x9, x9, x10
	add	x8, x8, x9
	ldrb	w8, [x8, #2]
	strb	w8, [sp, #9]
	ldrb	w10, [sp, #11]
	ldrb	w9, [sp, #10]
	ldrb	w8, [sp, #9]
	sxth	w0, w10
	sxth	w1, w9
	sxth	w2, w8
	bl	_compute_rgb_r
	sturb	w0, [x29, #-25]
	ldrb	w10, [sp, #11]
	ldrb	w9, [sp, #10]
	ldrb	w8, [sp, #9]
	sxth	w0, w10
	sxth	w1, w9
	sxth	w2, w8
	bl	_compute_rgb_g
	sturb	w0, [x29, #-26]
	ldrb	w10, [sp, #11]
	ldrb	w9, [sp, #10]
	ldrb	w8, [sp, #9]
	sxth	w0, w10
	sxth	w1, w9
	sxth	w2, w8
	bl	_compute_rgb_b
	sturb	w0, [x29, #-27]
	ldur	x0, [x29, #-24]
	ldur	x8, [x29, #-8]
	ldr	w8, [x8, #8]
	ldr	w9, [sp, #12]
	add	w8, w8, w9
	mov	x1, x8
	mov	w2, #0
	bl	_fseek
	subs	w8, w0, #0
	cset	w8, eq
	tbnz	w8, #0, LBB11_8
	b	LBB11_7
LBB11_7:
	adrp	x0, l_.str.4@PAGE
	add	x0, x0, l_.str.4@PAGEOFF
	bl	_printf
	mov	w0, #1
	bl	_exit
LBB11_8:                                ;   in Loop: Header=BB11_5 Depth=2
	ldur	x3, [x29, #-24]
	sub	x0, x29, #27
	mov	x2, #1
	str	x2, [sp]                        ; 8-byte Folded Spill
	mov	x1, x2
	bl	_fwrite
	ldr	x2, [sp]                        ; 8-byte Folded Reload
	ldur	x3, [x29, #-24]
	sub	x0, x29, #26
	mov	x1, x2
	bl	_fwrite
	ldr	x2, [sp]                        ; 8-byte Folded Reload
	ldur	x3, [x29, #-24]
	sub	x0, x29, #25
	mov	x1, x2
	bl	_fwrite
	ldr	w8, [sp, #24]
	add	w8, w8, #1
	str	w8, [sp, #24]
	b	LBB11_9
LBB11_9:                                ;   in Loop: Header=BB11_5 Depth=2
	ldr	w8, [sp, #16]
	add	w8, w8, #1
	str	w8, [sp, #16]
	b	LBB11_5
LBB11_10:                               ;   in Loop: Header=BB11_3 Depth=1
	b	LBB11_11
LBB11_11:                               ;   in Loop: Header=BB11_3 Depth=1
	ldr	w8, [sp, #20]
	add	w8, w8, #1
	str	w8, [sp, #20]
	b	LBB11_3
LBB11_12:
	add	x0, sp, #8
	strb	wzr, [sp, #8]
	ldur	x8, [x29, #-8]
	ldr	w8, [x8, #12]
	mov	x2, x8
	ldur	x3, [x29, #-24]
	mov	x1, #1
	bl	_fwrite
	ldp	x29, x30, [sp, #64]             ; 16-byte Folded Reload
	add	sp, sp, #80
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	_downsample_chroma              ; -- Begin function downsample_chroma
	.p2align	2
_downsample_chroma:                     ; @downsample_chroma
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #64
	.cfi_def_cfa_offset 64
	str	w0, [sp, #60]
	str	w1, [sp, #56]
	str	x2, [sp, #48]
	str	wzr, [sp, #44]
	b	LBB12_1
LBB12_1:                                ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB12_3 Depth 2
	ldr	w8, [sp, #44]
	ldr	w9, [sp, #60]
	subs	w8, w8, w9
	cset	w8, hs
	tbnz	w8, #0, LBB12_8
	b	LBB12_2
LBB12_2:                                ;   in Loop: Header=BB12_1 Depth=1
	str	wzr, [sp, #40]
	b	LBB12_3
LBB12_3:                                ;   Parent Loop BB12_1 Depth=1
                                        ; =>  This Inner Loop Header: Depth=2
	ldr	w8, [sp, #40]
	ldr	w9, [sp, #56]
	subs	w8, w8, w9
	cset	w8, hs
	tbnz	w8, #0, LBB12_6
	b	LBB12_4
LBB12_4:                                ;   in Loop: Header=BB12_3 Depth=2
	ldr	w8, [sp, #44]
	ldr	w9, [sp, #56]
	mul	w8, w8, w9
	ldr	w9, [sp, #40]
	add	w8, w8, w9
	str	w8, [sp, #36]
	ldr	w8, [sp, #36]
	add	w8, w8, #1
	str	w8, [sp, #32]
	ldr	w8, [sp, #36]
	ldr	w9, [sp, #56]
	add	w8, w8, w9
	str	w8, [sp, #28]
	ldr	w8, [sp, #28]
	add	w8, w8, #1
	str	w8, [sp, #24]
	ldr	x8, [sp, #48]
	ldr	w9, [sp, #36]
                                        ; kill: def $x9 killed $w9
	mov	x11, #3
	str	x11, [sp]                       ; 8-byte Folded Spill
	mul	x9, x9, x11
	add	x8, x8, x9
	ldrb	w8, [x8, #1]
	ldr	x9, [sp, #48]
	ldr	w10, [sp, #32]
                                        ; kill: def $x10 killed $w10
	mul	x10, x10, x11
	add	x9, x9, x10
	ldrb	w9, [x9, #1]
	add	w8, w8, w9
	ldr	x9, [sp, #48]
	ldr	w10, [sp, #28]
                                        ; kill: def $x10 killed $w10
	mul	x10, x10, x11
	add	x9, x9, x10
	ldrb	w9, [x9, #1]
	add	w8, w8, w9
	ldr	x9, [sp, #48]
	ldr	w10, [sp, #24]
                                        ; kill: def $x10 killed $w10
	mul	x10, x10, x11
	add	x9, x9, x10
	ldrb	w9, [x9, #1]
	add	w8, w8, w9
	str	w8, [sp, #20]
	ldr	w8, [sp, #20]
	mov	w9, #4
	sdiv	w8, w8, w9
	strb	w8, [sp, #19]
	ldr	x8, [sp, #48]
	ldr	w10, [sp, #36]
                                        ; kill: def $x10 killed $w10
	mul	x10, x10, x11
	add	x8, x8, x10
	ldrb	w8, [x8, #2]
	ldr	x10, [sp, #48]
	ldr	w12, [sp, #32]
                                        ; kill: def $x12 killed $w12
	mul	x12, x12, x11
	add	x10, x10, x12
	ldrb	w10, [x10, #2]
	add	w8, w8, w10
	ldr	x10, [sp, #48]
	ldr	w12, [sp, #28]
                                        ; kill: def $x12 killed $w12
	mul	x12, x12, x11
	add	x10, x10, x12
	ldrb	w10, [x10, #2]
	add	w8, w8, w10
	ldr	x10, [sp, #48]
	ldr	w12, [sp, #24]
                                        ; kill: def $x12 killed $w12
	mul	x12, x12, x11
	add	x10, x10, x12
	ldrb	w10, [x10, #2]
	add	w8, w8, w10
	str	w8, [sp, #12]
	ldr	w8, [sp, #12]
	sdiv	w8, w8, w9
	strb	w8, [sp, #11]
	ldrb	w8, [sp, #19]
	ldr	x9, [sp, #48]
	ldr	w10, [sp, #36]
                                        ; kill: def $x10 killed $w10
	mul	x10, x10, x11
	add	x9, x9, x10
	strb	w8, [x9, #1]
	ldrb	w8, [sp, #19]
	ldr	x9, [sp, #48]
	ldr	w10, [sp, #32]
                                        ; kill: def $x10 killed $w10
	mul	x10, x10, x11
	add	x9, x9, x10
	strb	w8, [x9, #1]
	ldrb	w8, [sp, #19]
	ldr	x9, [sp, #48]
	ldr	w10, [sp, #28]
                                        ; kill: def $x10 killed $w10
	mul	x10, x10, x11
	add	x9, x9, x10
	strb	w8, [x9, #1]
	ldrb	w8, [sp, #19]
	ldr	x9, [sp, #48]
	ldr	w10, [sp, #24]
                                        ; kill: def $x10 killed $w10
	mul	x10, x10, x11
	add	x9, x9, x10
	strb	w8, [x9, #1]
	ldrb	w8, [sp, #11]
	ldr	x9, [sp, #48]
	ldr	w10, [sp, #36]
                                        ; kill: def $x10 killed $w10
	mul	x10, x10, x11
	add	x9, x9, x10
	strb	w8, [x9, #2]
	ldrb	w8, [sp, #11]
	ldr	x9, [sp, #48]
	ldr	w10, [sp, #32]
                                        ; kill: def $x10 killed $w10
	mul	x10, x10, x11
	add	x9, x9, x10
	strb	w8, [x9, #2]
	ldrb	w8, [sp, #11]
	ldr	x9, [sp, #48]
	ldr	w10, [sp, #28]
                                        ; kill: def $x10 killed $w10
	mul	x10, x10, x11
	add	x9, x9, x10
	strb	w8, [x9, #2]
	ldrb	w8, [sp, #11]
	ldr	x9, [sp, #48]
	ldr	w10, [sp, #24]
                                        ; kill: def $x10 killed $w10
	mul	x10, x10, x11
	add	x9, x9, x10
	strb	w8, [x9, #2]
	b	LBB12_5
LBB12_5:                                ;   in Loop: Header=BB12_3 Depth=2
	ldr	w8, [sp, #40]
	add	w8, w8, #2
	str	w8, [sp, #40]
	b	LBB12_3
LBB12_6:                                ;   in Loop: Header=BB12_1 Depth=1
	b	LBB12_7
LBB12_7:                                ;   in Loop: Header=BB12_1 Depth=1
	ldr	w8, [sp, #44]
	add	w8, w8, #2
	str	w8, [sp, #44]
	b	LBB12_1
LBB12_8:
	add	sp, sp, #64
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	_get_image_info                 ; -- Begin function get_image_info
	.p2align	2
_get_image_info:                        ; @get_image_info
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #48
	.cfi_def_cfa_offset 48
	stp	x29, x30, [sp, #32]             ; 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	str	x1, [sp, #16]
	ldur	x0, [x29, #-8]
	mov	x1, #10
	mov	w2, #0
	bl	_fseek
	subs	w8, w0, #0
	cset	w8, eq
	tbnz	w8, #0, LBB13_2
	b	LBB13_1
LBB13_1:
	adrp	x0, l_.str.2@PAGE
	add	x0, x0, l_.str.2@PAGEOFF
	bl	_printf
	mov	w0, #1
	bl	_exit
LBB13_2:
	ldr	x8, [sp, #16]
	add	x0, x8, #8
	ldur	x3, [x29, #-8]
	mov	x1, #4
	mov	x2, #1
	bl	_fread
	ldur	x0, [x29, #-8]
	mov	x1, #18
	mov	w2, #0
	bl	_fseek
	subs	w8, w0, #0
	cset	w8, eq
	tbnz	w8, #0, LBB13_4
	b	LBB13_3
LBB13_3:
	adrp	x0, l_.str.1@PAGE
	add	x0, x0, l_.str.1@PAGEOFF
	bl	_printf
	mov	w0, #1
	bl	_exit
LBB13_4:
	ldr	x8, [sp, #16]
	add	x0, x8, #4
	ldur	x3, [x29, #-8]
	mov	x1, #4
	mov	x2, #1
	bl	_fread
	ldur	x0, [x29, #-8]
	mov	x1, #22
	mov	w2, #0
	bl	_fseek
	subs	w8, w0, #0
	cset	w8, eq
	tbnz	w8, #0, LBB13_6
	b	LBB13_5
LBB13_5:
	adrp	x0, l_.str.2@PAGE
	add	x0, x0, l_.str.2@PAGEOFF
	bl	_printf
	mov	w0, #1
	bl	_exit
LBB13_6:
	ldr	x0, [sp, #16]
	ldur	x3, [x29, #-8]
	mov	x1, #4
	mov	x2, #1
	bl	_fread
	ldr	x8, [sp, #16]
	ldr	w8, [x8, #4]
	mov	w9, #3
	mul	w8, w8, w9
	str	w8, [sp, #12]
	ldr	w8, [sp, #12]
	mov	w10, #4
	udiv	w9, w8, w10
	mul	w9, w9, w10
	subs	w8, w8, w9
	subs	w8, w8, #0
	cset	w8, eq
	tbnz	w8, #0, LBB13_8
	b	LBB13_7
LBB13_7:
	ldr	w9, [sp, #12]
	mov	w8, #4
	udiv	w10, w9, w8
	mul	w10, w10, w8
	subs	w9, w9, w10
	subs	w8, w8, w9
	ldr	x9, [sp, #16]
	str	w8, [x9, #12]
	b	LBB13_9
LBB13_8:
	ldr	x8, [sp, #16]
	str	wzr, [x8, #12]
	b	LBB13_9
LBB13_9:
	ldp	x29, x30, [sp, #32]             ; 16-byte Folded Reload
	add	sp, sp, #48
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	_write_header                   ; -- Begin function write_header
	.p2align	2
_write_header:                          ; @write_header
	.cfi_startproc
; %bb.0:
	stp	x29, x30, [sp, #-16]!           ; 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	mov	x29, sp
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	sub	sp, sp, #96
	adrp	x8, ___stack_chk_guard@GOTPAGE
	ldr	x8, [x8, ___stack_chk_guard@GOTPAGEOFF]
	ldr	x8, [x8]
	stur	x8, [x29, #-8]
	stur	x0, [x29, #-16]
	stur	x1, [x29, #-24]
	stur	w2, [x29, #-28]
	ldur	w8, [x29, #-28]
                                        ; kill: def $x8 killed $w8
	mov	x9, sp
	stur	x9, [x29, #-40]
	lsr	x9, x8, #0
	add	x9, x9, #15
	and	x9, x9, #0xfffffffffffffff0
	stur	x9, [x29, #-80]                 ; 8-byte Folded Spill
	adrp	x16, ___chkstk_darwin@GOTPAGE
	ldr	x16, [x16, ___chkstk_darwin@GOTPAGEOFF]
	blr	x16
	ldur	x10, [x29, #-80]                ; 8-byte Folded Reload
	mov	x9, sp
	subs	x0, x9, x10
	stur	x0, [x29, #-72]                 ; 8-byte Folded Spill
	mov	sp, x0
	stur	x8, [x29, #-48]
	mov	x1, #0
	stur	xzr, [x29, #-64]
	ldur	x0, [x29, #-24]
	mov	w2, #0
	bl	_fseek
	b	LBB14_1
LBB14_1:                                ; =>This Inner Loop Header: Depth=1
	ldur	x8, [x29, #-64]
	ldur	w9, [x29, #-28]
                                        ; kill: def $x9 killed $w9
	subs	x8, x8, x9
	cset	w8, hs
	mov	w9, #0
	stur	w9, [x29, #-84]                 ; 4-byte Folded Spill
	tbnz	w8, #0, LBB14_3
	b	LBB14_2
LBB14_2:                                ;   in Loop: Header=BB14_1 Depth=1
	ldur	x0, [x29, #-72]                 ; 8-byte Folded Reload
	ldur	w8, [x29, #-28]
                                        ; kill: def $x8 killed $w8
	ldur	x9, [x29, #-64]
	subs	x2, x8, x9
	ldur	x3, [x29, #-24]
	mov	x1, #1
	bl	_fread
	stur	x0, [x29, #-56]
	subs	x8, x0, #0
	cset	w8, hi
	stur	w8, [x29, #-84]                 ; 4-byte Folded Spill
	b	LBB14_3
LBB14_3:                                ;   in Loop: Header=BB14_1 Depth=1
	ldur	w8, [x29, #-84]                 ; 4-byte Folded Reload
	tbz	w8, #0, LBB14_7
	b	LBB14_4
LBB14_4:                                ;   in Loop: Header=BB14_1 Depth=1
	ldur	x0, [x29, #-72]                 ; 8-byte Folded Reload
	ldur	x2, [x29, #-56]
	ldur	x3, [x29, #-16]
	mov	x1, #1
	bl	_fwrite
	adds	x8, x0, #1
	cset	w8, ne
	tbnz	w8, #0, LBB14_6
	b	LBB14_5
LBB14_5:
	adrp	x0, l_.str.5@PAGE
	add	x0, x0, l_.str.5@PAGEOFF
	bl	_printf
	mov	w0, #1
	bl	_exit
LBB14_6:                                ;   in Loop: Header=BB14_1 Depth=1
	ldur	x9, [x29, #-56]
	ldur	x8, [x29, #-64]
	add	x8, x8, x9
	stur	x8, [x29, #-64]
	b	LBB14_1
LBB14_7:
	ldur	x8, [x29, #-40]
	stur	x8, [x29, #-96]                 ; 8-byte Folded Spill
	ldur	x9, [x29, #-8]
	adrp	x8, ___stack_chk_guard@GOTPAGE
	ldr	x8, [x8, ___stack_chk_guard@GOTPAGEOFF]
	ldr	x8, [x8]
	subs	x8, x8, x9
	cset	w8, eq
	tbnz	w8, #0, LBB14_9
	b	LBB14_8
LBB14_8:
	bl	___stack_chk_fail
LBB14_9:
	ldur	x8, [x29, #-96]                 ; 8-byte Folded Reload
	mov	sp, x8
	mov	sp, x29
	ldp	x29, x30, [sp], #16             ; 16-byte Folded Reload
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	_write_ycc_components           ; -- Begin function write_ycc_components
	.p2align	2
_write_ycc_components:                  ; @write_ycc_components
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #160
	.cfi_def_cfa_offset 160
	stp	x29, x30, [sp, #144]            ; 16-byte Folded Spill
	add	x29, sp, #144
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	x1, [x29, #-16]
	stur	x2, [x29, #-24]
	stur	x3, [x29, #-32]
	stur	x4, [x29, #-40]
	ldur	x8, [x29, #-32]
	ldr	w8, [x8, #4]
	mov	w9, #3
	mul	w8, w8, w9
	stur	w8, [x29, #-44]
	ldur	w8, [x29, #-44]
	mov	w10, #4
	udiv	w9, w8, w10
	mul	w9, w9, w10
	subs	w8, w8, w9
	subs	w8, w8, #0
	cset	w8, eq
	tbnz	w8, #0, LBB15_2
	b	LBB15_1
LBB15_1:
	ldur	w9, [x29, #-44]
	mov	w8, #4
	udiv	w10, w9, w8
	mul	w10, w10, w8
	subs	w9, w9, w10
	subs	w8, w8, w9
	stur	w8, [x29, #-48]
	ldur	w9, [x29, #-48]
	ldur	w8, [x29, #-44]
	add	w8, w8, w9
	stur	w8, [x29, #-44]
	b	LBB15_2
LBB15_2:
	stur	wzr, [x29, #-52]
	stur	wzr, [x29, #-56]
	b	LBB15_3
LBB15_3:                                ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB15_5 Depth 2
	ldur	w8, [x29, #-56]
	ldur	x9, [x29, #-32]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, hs
	tbnz	w8, #0, LBB15_12
	b	LBB15_4
LBB15_4:                                ;   in Loop: Header=BB15_3 Depth=1
	stur	wzr, [x29, #-60]
	b	LBB15_5
LBB15_5:                                ;   Parent Loop BB15_3 Depth=1
                                        ; =>  This Inner Loop Header: Depth=2
	ldur	w8, [x29, #-60]
	ldur	x9, [x29, #-32]
	ldr	w9, [x9, #4]
	subs	w8, w8, w9
	cset	w8, hs
	tbnz	w8, #0, LBB15_10
	b	LBB15_6
LBB15_6:                                ;   in Loop: Header=BB15_5 Depth=2
	ldur	w8, [x29, #-56]
	ldur	w9, [x29, #-44]
	mul	w8, w8, w9
	ldur	w9, [x29, #-60]
	mov	w10, #3
	mul	w9, w9, w10
	add	w8, w8, w9
	stur	w8, [x29, #-64]
	ldur	x0, [x29, #-8]
	ldur	x8, [x29, #-32]
	ldr	w8, [x8, #8]
	ldur	w9, [x29, #-64]
	add	w8, w8, w9
	mov	x1, x8
	mov	w2, #0
	bl	_fseek
	subs	w8, w0, #0
	cset	w8, eq
	tbnz	w8, #0, LBB15_8
	b	LBB15_7
LBB15_7:
	adrp	x0, l_.str.4@PAGE
	add	x0, x0, l_.str.4@PAGEOFF
	bl	_printf
	mov	w0, #1
	bl	_exit
LBB15_8:                                ;   in Loop: Header=BB15_5 Depth=2
	ldur	x8, [x29, #-40]
	ldur	w9, [x29, #-52]
                                        ; kill: def $x9 killed $w9
	mov	x10, #3
	str	x10, [sp, #48]                  ; 8-byte Folded Spill
	mul	x9, x9, x10
	add	x0, x8, x9
	ldur	x3, [x29, #-8]
	mov	x2, #1
	str	x2, [sp, #56]                   ; 8-byte Folded Spill
	mov	x1, x2
	bl	_fwrite
	ldr	x10, [sp, #48]                  ; 8-byte Folded Reload
	ldr	x2, [sp, #56]                   ; 8-byte Folded Reload
	ldur	x8, [x29, #-40]
	ldur	w9, [x29, #-52]
                                        ; kill: def $x9 killed $w9
	mul	x9, x9, x10
	add	x0, x8, x9
	ldur	x3, [x29, #-8]
	mov	x1, x2
	bl	_fwrite
	ldr	x10, [sp, #48]                  ; 8-byte Folded Reload
	ldr	x2, [sp, #56]                   ; 8-byte Folded Reload
	ldur	x8, [x29, #-40]
	ldur	w9, [x29, #-52]
                                        ; kill: def $x9 killed $w9
	mul	x9, x9, x10
	add	x0, x8, x9
	ldur	x3, [x29, #-8]
	mov	x1, x2
	bl	_fwrite
	ldur	w8, [x29, #-52]
	add	w8, w8, #1
	stur	w8, [x29, #-52]
	b	LBB15_9
LBB15_9:                                ;   in Loop: Header=BB15_5 Depth=2
	ldur	w8, [x29, #-60]
	add	w8, w8, #1
	stur	w8, [x29, #-60]
	b	LBB15_5
LBB15_10:                               ;   in Loop: Header=BB15_3 Depth=1
	b	LBB15_11
LBB15_11:                               ;   in Loop: Header=BB15_3 Depth=1
	ldur	w8, [x29, #-56]
	add	w8, w8, #1
	stur	w8, [x29, #-56]
	b	LBB15_3
LBB15_12:
	ldur	x0, [x29, #-8]
	ldur	x8, [x29, #-32]
	ldr	w8, [x8, #12]
	mov	x1, x8
	mov	w2, #1
	bl	_fseek
	ldur	x8, [x29, #-32]
	ldr	w8, [x8, #4]
	mov	w9, #2
	udiv	w8, w8, w9
	mov	w9, #3
	mul	w8, w8, w9
	stur	w8, [x29, #-44]
	stur	wzr, [x29, #-68]
	ldur	w8, [x29, #-44]
	mov	w10, #4
	udiv	w9, w8, w10
	mul	w9, w9, w10
	subs	w8, w8, w9
	subs	w8, w8, #0
	cset	w8, eq
	tbnz	w8, #0, LBB15_14
	b	LBB15_13
LBB15_13:
	ldur	w9, [x29, #-44]
	mov	w8, #4
	udiv	w10, w9, w8
	mul	w10, w10, w8
	subs	w9, w9, w10
	subs	w8, w8, w9
	stur	w8, [x29, #-68]
	ldur	w9, [x29, #-68]
	ldur	w8, [x29, #-44]
	add	w8, w8, w9
	stur	w8, [x29, #-44]
	b	LBB15_14
LBB15_14:
	stur	wzr, [x29, #-52]
	stur	wzr, [x29, #-56]
	b	LBB15_15
LBB15_15:                               ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB15_17 Depth 2
	ldur	w8, [x29, #-56]
	ldur	x9, [x29, #-32]
	ldr	w9, [x9]
	mov	w10, #2
	udiv	w9, w9, w10
	subs	w8, w8, w9
	cset	w8, hs
	tbnz	w8, #0, LBB15_26
	b	LBB15_16
LBB15_16:                               ;   in Loop: Header=BB15_15 Depth=1
	str	wzr, [sp, #72]
	b	LBB15_17
LBB15_17:                               ;   Parent Loop BB15_15 Depth=1
                                        ; =>  This Inner Loop Header: Depth=2
	ldr	w8, [sp, #72]
	ldur	x9, [x29, #-32]
	ldr	w9, [x9, #4]
	mov	w10, #2
	udiv	w9, w9, w10
	subs	w8, w8, w9
	cset	w8, hs
	tbnz	w8, #0, LBB15_24
	b	LBB15_18
LBB15_18:                               ;   in Loop: Header=BB15_17 Depth=2
	ldur	w8, [x29, #-56]
	ldur	w9, [x29, #-44]
	mul	w8, w8, w9
	ldr	w9, [sp, #72]
	mov	w10, #3
	mul	w9, w9, w10
	add	w8, w8, w9
	str	w8, [sp, #68]
	mov	w8, #128
	strb	w8, [sp, #67]
	ldur	x0, [x29, #-16]
	ldur	x8, [x29, #-32]
	ldr	w8, [x8, #8]
	ldr	w9, [sp, #68]
	add	w8, w8, w9
	mov	x1, x8
	mov	w2, #0
	bl	_fseek
	subs	w8, w0, #0
	cset	w8, eq
	tbnz	w8, #0, LBB15_20
	b	LBB15_19
LBB15_19:
	adrp	x0, l_.str.4@PAGE
	add	x0, x0, l_.str.4@PAGEOFF
	bl	_printf
	mov	w0, #1
	bl	_exit
LBB15_20:                               ;   in Loop: Header=BB15_17 Depth=2
	ldur	x8, [x29, #-40]
	ldur	w9, [x29, #-52]
                                        ; kill: def $x9 killed $w9
	mov	x10, #3
	mul	x9, x9, x10
	add	x8, x8, x9
	add	x0, x8, #1
	ldur	x3, [x29, #-16]
	mov	x2, #1
	str	x2, [sp, #32]                   ; 8-byte Folded Spill
	mov	x1, x2
	bl	_fwrite
	ldr	x2, [sp, #32]                   ; 8-byte Folded Reload
	ldur	x3, [x29, #-16]
	add	x0, sp, #67
	str	x0, [sp, #40]                   ; 8-byte Folded Spill
	mov	x1, x2
	bl	_fwrite
	ldr	x2, [sp, #32]                   ; 8-byte Folded Reload
	ldr	x0, [sp, #40]                   ; 8-byte Folded Reload
	ldur	x3, [x29, #-16]
	mov	x1, x2
	bl	_fwrite
	ldur	x0, [x29, #-24]
	ldur	x8, [x29, #-32]
	ldr	w8, [x8, #8]
	ldr	w9, [sp, #68]
	add	w8, w8, w9
	mov	x1, x8
	mov	w2, #0
	bl	_fseek
	subs	w8, w0, #0
	cset	w8, eq
	tbnz	w8, #0, LBB15_22
	b	LBB15_21
LBB15_21:
	adrp	x0, l_.str.4@PAGE
	add	x0, x0, l_.str.4@PAGEOFF
	bl	_printf
	mov	w0, #1
	bl	_exit
LBB15_22:                               ;   in Loop: Header=BB15_17 Depth=2
	ldur	x3, [x29, #-24]
	add	x0, sp, #67
	str	x0, [sp, #16]                   ; 8-byte Folded Spill
	mov	x2, #1
	str	x2, [sp, #24]                   ; 8-byte Folded Spill
	mov	x1, x2
	bl	_fwrite
	ldr	x2, [sp, #24]                   ; 8-byte Folded Reload
	ldr	x0, [sp, #16]                   ; 8-byte Folded Reload
	ldur	x3, [x29, #-24]
	mov	x1, x2
	bl	_fwrite
	ldr	x2, [sp, #24]                   ; 8-byte Folded Reload
	ldur	x8, [x29, #-40]
	ldur	w9, [x29, #-52]
                                        ; kill: def $x9 killed $w9
	mov	x10, #3
	mul	x9, x9, x10
	add	x8, x8, x9
	add	x0, x8, #2
	ldur	x3, [x29, #-24]
	mov	x1, x2
	bl	_fwrite
	ldur	w8, [x29, #-52]
	add	w8, w8, #2
	stur	w8, [x29, #-52]
	b	LBB15_23
LBB15_23:                               ;   in Loop: Header=BB15_17 Depth=2
	ldr	w8, [sp, #72]
	add	w8, w8, #1
	str	w8, [sp, #72]
	b	LBB15_17
LBB15_24:                               ;   in Loop: Header=BB15_15 Depth=1
	ldur	x8, [x29, #-32]
	ldr	w9, [x8, #4]
	ldur	w8, [x29, #-52]
	add	w8, w8, w9
	stur	w8, [x29, #-52]
	b	LBB15_25
LBB15_25:                               ;   in Loop: Header=BB15_15 Depth=1
	ldur	w8, [x29, #-56]
	add	w8, w8, #1
	stur	w8, [x29, #-56]
	b	LBB15_15
LBB15_26:
	add	x0, sp, #66
	str	x0, [sp, #8]                    ; 8-byte Folded Spill
	strb	wzr, [sp, #66]
	ldur	w8, [x29, #-68]
	mov	x2, x8
	ldur	x3, [x29, #-24]
	mov	x1, #1
	str	x1, [sp]                        ; 8-byte Folded Spill
	bl	_fwrite
	ldr	x1, [sp]                        ; 8-byte Folded Reload
	ldr	x0, [sp, #8]                    ; 8-byte Folded Reload
	ldur	w8, [x29, #-68]
	mov	x2, x8
	ldur	x3, [x29, #-16]
	bl	_fwrite
	ldp	x29, x30, [sp, #144]            ; 16-byte Folded Reload
	add	sp, sp, #160
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	_main                           ; -- Begin function main
	.p2align	2
_main:                                  ; @main
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #128
	.cfi_def_cfa_offset 128
	stp	x29, x30, [sp, #112]            ; 16-byte Folded Spill
	add	x29, sp, #112
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	wzr, [x29, #-4]
	stur	w0, [x29, #-8]
	stur	x1, [x29, #-16]
	stur	wzr, [x29, #-20]
	ldur	w8, [x29, #-8]
	subs	w8, w8, #2
	cset	w8, ge
	tbnz	w8, #0, LBB16_2
	b	LBB16_1
LBB16_1:
	adrp	x0, l_.str.6@PAGE
	add	x0, x0, l_.str.6@PAGEOFF
	bl	_printf
	ldur	x8, [x29, #-16]
	ldr	x8, [x8]
	mov	x9, sp
	str	x8, [x9]
	adrp	x0, l_.str.7@PAGE
	add	x0, x0, l_.str.7@PAGEOFF
	bl	_printf
	mov	w8, #1
	stur	w8, [x29, #-4]
	b	LBB16_34
LBB16_2:
	mov	w8, #1
	stur	w8, [x29, #-24]
	b	LBB16_3
LBB16_3:                                ; =>This Inner Loop Header: Depth=1
	ldur	w8, [x29, #-24]
	ldur	w9, [x29, #-8]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB16_11
	b	LBB16_4
LBB16_4:                                ;   in Loop: Header=BB16_3 Depth=1
	ldur	x8, [x29, #-16]
	ldursw	x9, [x29, #-24]
	ldr	x8, [x8, x9, lsl #3]
	ldrsb	w8, [x8]
	subs	w8, w8, #45
	cset	w8, ne
	tbnz	w8, #0, LBB16_9
	b	LBB16_5
LBB16_5:                                ;   in Loop: Header=BB16_3 Depth=1
	ldur	x8, [x29, #-16]
	ldursw	x9, [x29, #-24]
	ldr	x0, [x8, x9, lsl #3]
	adrp	x1, l_.str.8@PAGE
	add	x1, x1, l_.str.8@PAGEOFF
	bl	_strcmp
	subs	w8, w0, #0
	cset	w8, ne
	tbnz	w8, #0, LBB16_7
	b	LBB16_6
LBB16_6:                                ;   in Loop: Header=BB16_3 Depth=1
	mov	w8, #1
	stur	w8, [x29, #-20]
	b	LBB16_8
LBB16_7:
	ldur	x8, [x29, #-16]
	ldursw	x9, [x29, #-24]
	ldr	x8, [x8, x9, lsl #3]
	mov	x9, sp
	str	x8, [x9]
	adrp	x0, l_.str.9@PAGE
	add	x0, x0, l_.str.9@PAGEOFF
	bl	_printf
	ldur	x8, [x29, #-16]
	ldr	x8, [x8]
	mov	x9, sp
	str	x8, [x9]
	adrp	x0, l_.str.7@PAGE
	add	x0, x0, l_.str.7@PAGEOFF
	bl	_printf
	mov	w8, #1
	stur	w8, [x29, #-4]
	b	LBB16_34
LBB16_8:                                ;   in Loop: Header=BB16_3 Depth=1
	b	LBB16_9
LBB16_9:                                ;   in Loop: Header=BB16_3 Depth=1
	b	LBB16_10
LBB16_10:                               ;   in Loop: Header=BB16_3 Depth=1
	ldur	w8, [x29, #-24]
	add	w8, w8, #1
	stur	w8, [x29, #-24]
	b	LBB16_3
LBB16_11:
	adrp	x0, l_.str.10@PAGE
	add	x0, x0, l_.str.10@PAGEOFF
	bl	_chdir
	ldur	x8, [x29, #-16]
	ldr	x0, [x8, #8]
	adrp	x1, l_.str.11@PAGE
	add	x1, x1, l_.str.11@PAGEOFF
	bl	_fopen
	stur	x0, [x29, #-32]
	ldur	x8, [x29, #-32]
	subs	x8, x8, #0
	cset	w8, ne
	tbnz	w8, #0, LBB16_13
	b	LBB16_12
LBB16_12:
	ldur	x8, [x29, #-16]
	ldr	x8, [x8, #8]
	mov	x9, sp
	str	x8, [x9]
	adrp	x0, l_.str.12@PAGE
	add	x0, x0, l_.str.12@PAGEOFF
	bl	_printf
	mov	w0, #1
	bl	_exit
LBB16_13:
	adrp	x0, l_.str.13@PAGE
	add	x0, x0, l_.str.13@PAGEOFF
	bl	_chdir
	adrp	x0, l_.str.14@PAGE
	add	x0, x0, l_.str.14@PAGEOFF
	bl	_chdir
	ldur	w8, [x29, #-20]
	subs	w8, w8, #1
	cset	w8, ne
	tbnz	w8, #0, LBB16_21
	b	LBB16_14
LBB16_14:
	adrp	x0, l_.str.15@PAGE
	add	x0, x0, l_.str.15@PAGEOFF
	bl	_chdir
	ldur	x8, [x29, #-16]
	ldr	x0, [x8, #8]
	adrp	x1, l_.str.16@PAGE
	add	x1, x1, l_.str.16@PAGEOFF
	bl	_fopen
	stur	x0, [x29, #-40]
	ldur	x8, [x29, #-40]
	subs	x8, x8, #0
	cset	w8, ne
	tbnz	w8, #0, LBB16_16
	b	LBB16_15
LBB16_15:
	ldur	x0, [x29, #-32]
	bl	_fclose
	ldur	x0, [x29, #-40]
	bl	_fclose
	ldur	x8, [x29, #-16]
	ldr	x8, [x8, #8]
	mov	x9, sp
	str	x8, [x9]
	adrp	x0, l_.str.17@PAGE
	add	x0, x0, l_.str.17@PAGEOFF
	bl	_printf
	mov	w0, #1
	bl	_exit
LBB16_16:
	adrp	x0, l_.str.13@PAGE
	add	x0, x0, l_.str.13@PAGEOFF
	bl	_chdir
	adrp	x0, l_.str.18@PAGE
	add	x0, x0, l_.str.18@PAGEOFF
	bl	_chdir
	ldur	x8, [x29, #-16]
	ldr	x0, [x8, #8]
	adrp	x1, l_.str.16@PAGE
	add	x1, x1, l_.str.16@PAGEOFF
	bl	_fopen
	stur	x0, [x29, #-48]
	ldur	x8, [x29, #-48]
	subs	x8, x8, #0
	cset	w8, ne
	tbnz	w8, #0, LBB16_18
	b	LBB16_17
LBB16_17:
	ldur	x8, [x29, #-16]
	ldr	x8, [x8, #8]
	mov	x9, sp
	str	x8, [x9]
	adrp	x0, l_.str.19@PAGE
	add	x0, x0, l_.str.19@PAGEOFF
	bl	_printf
	mov	w0, #1
	bl	_exit
LBB16_18:
	adrp	x0, l_.str.13@PAGE
	add	x0, x0, l_.str.13@PAGEOFF
	bl	_chdir
	adrp	x0, l_.str.20@PAGE
	add	x0, x0, l_.str.20@PAGEOFF
	bl	_chdir
	ldur	x8, [x29, #-16]
	ldr	x0, [x8, #8]
	adrp	x1, l_.str.16@PAGE
	add	x1, x1, l_.str.16@PAGEOFF
	bl	_fopen
	str	x0, [sp, #56]
	ldr	x8, [sp, #56]
	subs	x8, x8, #0
	cset	w8, ne
	tbnz	w8, #0, LBB16_20
	b	LBB16_19
LBB16_19:
	ldur	x8, [x29, #-16]
	ldr	x8, [x8, #8]
	mov	x9, sp
	str	x8, [x9]
	adrp	x0, l_.str.21@PAGE
	add	x0, x0, l_.str.21@PAGEOFF
	bl	_printf
	mov	w0, #1
	bl	_exit
LBB16_20:
	adrp	x0, l_.str.13@PAGE
	add	x0, x0, l_.str.13@PAGEOFF
	bl	_chdir
	b	LBB16_21
LBB16_21:
	adrp	x0, l_.str.22@PAGE
	add	x0, x0, l_.str.22@PAGEOFF
	bl	_chdir
	ldur	x8, [x29, #-16]
	ldr	x0, [x8, #8]
	adrp	x1, l_.str.16@PAGE
	add	x1, x1, l_.str.16@PAGEOFF
	bl	_fopen
	str	x0, [sp, #48]
	ldr	x8, [sp, #48]
	subs	x8, x8, #0
	cset	w8, ne
	tbnz	w8, #0, LBB16_23
	b	LBB16_22
LBB16_22:
	ldur	x8, [x29, #-16]
	ldr	x8, [x8, #8]
	mov	x9, sp
	str	x8, [x9]
	adrp	x0, l_.str.23@PAGE
	add	x0, x0, l_.str.23@PAGEOFF
	bl	_printf
	mov	w0, #1
	bl	_exit
LBB16_23:
	adrp	x0, l_.str.13@PAGE
	add	x0, x0, l_.str.13@PAGEOFF
	str	x0, [sp, #16]                   ; 8-byte Folded Spill
	bl	_chdir
	ldr	x0, [sp, #16]                   ; 8-byte Folded Reload
	bl	_chdir
	mov	x0, #20
	bl	_malloc
	str	x0, [sp, #40]
	ldr	x8, [sp, #40]
	subs	x8, x8, #0
	cset	w8, ne
	tbnz	w8, #0, LBB16_25
	b	LBB16_24
LBB16_24:
	adrp	x0, l_.str.24@PAGE
	add	x0, x0, l_.str.24@PAGEOFF
	bl	_printf
	mov	w0, #1
	bl	_exit
LBB16_25:
	ldur	x0, [x29, #-32]
	ldr	x1, [sp, #40]
	bl	_get_image_info
	ldr	x8, [sp, #40]
	ldr	w0, [x8, #4]
	ldr	x8, [sp, #40]
	ldr	w1, [x8]
	bl	_check_height_width
	ldr	x8, [sp, #40]
	ldr	w8, [x8]
	mov	x9, x8
	mov	x8, #3
	mul	x8, x8, x9
	ldr	x9, [sp, #40]
	ldr	w9, [x9, #4]
                                        ; kill: def $x9 killed $w9
	mul	x0, x8, x9
	bl	_malloc
	str	x0, [sp, #32]
	ldr	x8, [sp, #32]
	subs	x8, x8, #0
	cset	w8, ne
	tbnz	w8, #0, LBB16_27
	b	LBB16_26
LBB16_26:
	adrp	x0, l_.str.25@PAGE
	add	x0, x0, l_.str.25@PAGEOFF
	bl	_printf
	mov	w0, #1
	bl	_exit
LBB16_27:
	ldr	x8, [sp, #40]
	ldr	w8, [x8, #8]
	str	w8, [sp, #28]
	ldr	x0, [sp, #48]
	ldur	x1, [x29, #-32]
	ldr	w2, [sp, #28]
	bl	_write_header
	ldur	w8, [x29, #-20]
	subs	w8, w8, #1
	cset	w8, ne
	tbnz	w8, #0, LBB16_29
	b	LBB16_28
LBB16_28:
	ldur	x0, [x29, #-40]
	ldur	x1, [x29, #-32]
	ldr	w2, [sp, #28]
	bl	_write_header
	ldr	x0, [sp, #56]
	ldur	x1, [x29, #-32]
	ldr	w2, [sp, #28]
	bl	_write_header
	ldur	x0, [x29, #-48]
	ldur	x1, [x29, #-32]
	ldr	w2, [sp, #28]
	bl	_write_header
	ldur	x0, [x29, #-48]
	ldr	x8, [sp, #40]
	ldr	w8, [x8, #4]
	mov	w9, #2
	str	w9, [sp, #12]                   ; 4-byte Folded Spill
	udiv	w1, w8, w9
	ldr	x8, [sp, #40]
	ldr	w8, [x8]
	udiv	w2, w8, w9
	bl	_resize_file
	ldr	w9, [sp, #12]                   ; 4-byte Folded Reload
	ldr	x0, [sp, #56]
	ldr	x8, [sp, #40]
	ldr	w8, [x8, #4]
	udiv	w1, w8, w9
	ldr	x8, [sp, #40]
	ldr	w8, [x8]
	udiv	w2, w8, w9
	bl	_resize_file
	b	LBB16_29
LBB16_29:
	ldur	x0, [x29, #-32]
	ldr	x1, [sp, #40]
	ldr	x2, [sp, #32]
	bl	_rgb_to_ycc
	ldr	x8, [sp, #40]
	ldr	w0, [x8]
	ldr	x8, [sp, #40]
	ldr	w1, [x8, #4]
	ldr	x2, [sp, #32]
	bl	_downsample_chroma
	ldur	w8, [x29, #-20]
	subs	w8, w8, #1
	cset	w8, ne
	tbnz	w8, #0, LBB16_31
	b	LBB16_30
LBB16_30:
	ldur	x0, [x29, #-40]
	ldur	x1, [x29, #-48]
	ldr	x2, [sp, #56]
	ldr	x3, [sp, #40]
	ldr	x4, [sp, #32]
	bl	_write_ycc_components
	b	LBB16_31
LBB16_31:
	ldr	x0, [sp, #40]
	ldr	x1, [sp, #32]
	ldr	x2, [sp, #48]
	bl	_ycc_to_rgb
	ldr	x0, [sp, #32]
	bl	_free
	ldur	x0, [x29, #-32]
	bl	_fclose
	ldr	x0, [sp, #48]
	bl	_fclose
	ldur	w8, [x29, #-20]
	subs	w8, w8, #1
	cset	w8, ne
	tbnz	w8, #0, LBB16_33
	b	LBB16_32
LBB16_32:
	ldur	x0, [x29, #-40]
	bl	_fclose
	ldur	x0, [x29, #-48]
	bl	_fclose
	ldr	x0, [sp, #56]
	bl	_fclose
	b	LBB16_33
LBB16_33:
	stur	wzr, [x29, #-4]
	b	LBB16_34
LBB16_34:
	ldur	w0, [x29, #-4]
	ldp	x29, x30, [sp, #112]            ; 16-byte Folded Reload
	add	sp, sp, #128
	ret
	.cfi_endproc
                                        ; -- End function
	.section	__TEXT,__cstring,cstring_literals
l_.str:                                 ; @.str
	.asciz	"Error: %s\n"

l_.str.1:                               ; @.str.1
	.asciz	"Error seeking to width position\n"

l_.str.2:                               ; @.str.2
	.asciz	"Error seeking to offset position\n"

l_.str.3:                               ; @.str.3
	.asciz	"width and height must be divisible by 2"

l_.str.4:                               ; @.str.4
	.asciz	"Error seeking to pixel\n"

l_.str.5:                               ; @.str.5
	.asciz	"Error writing to luma file\n"

l_.str.6:                               ; @.str.6
	.asciz	"Error: Missing mandatory input .BMP file.\n"

l_.str.7:                               ; @.str.7
	.asciz	"Usage: %s <input_file.BMP> [-c]\n"

l_.str.8:                               ; @.str.8
	.asciz	"-c"

l_.str.9:                               ; @.str.9
	.asciz	"Error: Unrecognized flag %s\n"

l_.str.10:                              ; @.str.10
	.asciz	"input"

l_.str.11:                              ; @.str.11
	.asciz	"r"

l_.str.12:                              ; @.str.12
	.asciz	"Could not open %s\n"

l_.str.13:                              ; @.str.13
	.asciz	".."

l_.str.14:                              ; @.str.14
	.asciz	"output"

l_.str.15:                              ; @.str.15
	.asciz	"luma"

l_.str.16:                              ; @.str.16
	.asciz	"w+"

l_.str.17:                              ; @.str.17
	.asciz	"Error creating luma/%s\n"

l_.str.18:                              ; @.str.18
	.asciz	"cb"

l_.str.19:                              ; @.str.19
	.asciz	"Error creating cb/%s\n"

l_.str.20:                              ; @.str.20
	.asciz	"cr"

l_.str.21:                              ; @.str.21
	.asciz	"Error creating cr/%s\n"

l_.str.22:                              ; @.str.22
	.asciz	"rgb"

l_.str.23:                              ; @.str.23
	.asciz	"Error creating RBG/%s\n"

l_.str.24:                              ; @.str.24
	.asciz	"Malloc for header failed\n"

l_.str.25:                              ; @.str.25
	.asciz	"Malloc for pixels failed\n"

.subsections_via_symbols
